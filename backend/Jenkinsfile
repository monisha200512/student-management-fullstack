pipeline {
    agent any
    
    environment {
        DOCKER_BUILDKIT = '1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/monisha200512/student-management-fullstack.git'
            }
        }
        
        stage('Build Backend') {
            steps {
                dir('backend') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean compile'
                }
            }
        }
        
        stage('Test Backend') {
            steps {
                dir('backend') {
                    sh './mvnw test'
                }
            }
        }
        
        stage('Package Backend') {
            steps {
                dir('backend') {
                    sh './mvnw package -DskipTests'
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }
        
        stage('Docker Build') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('backend') {
                            sh 'docker build -t student-management-backend:latest .'
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('frontend') {
                            sh 'docker build -t student-management-frontend:latest .'
                        }
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                sh 'docker-compose down || true'
                sh 'docker-compose up --build -d'
                sh 'sleep 30'  // Wait for containers to start
                sh 'docker-compose ps'
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    // Check if backend is healthy
                    sh 'curl -f http://localhost:9090/actuator/health || echo "Backend health check failed"'
                    // Check if frontend is accessible
                    sh 'curl -f http://localhost:5000 || echo "Frontend health check failed"'
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed!'
            sh 'docker-compose logs --tail=50'
        }
        success {
            echo 'Pipeline succeeded! üéâ Application deployed successfully!'
        }
        failure {
            echo 'Pipeline failed! ‚ùå Check the logs above.'
            sh 'docker-compose down'
        }
    }
}
